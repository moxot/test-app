name: Build and Push Docker Image to Docker Hub and Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        npm install
        npm ci 

    - name: build
      run: |
        npm run build
        npm run test
  build:
    runs-on: ubuntu-latest
    needs: [build_test]
    env:
      AWS_INSTANCE_SG_ID: ${{ secrets.AWS_SECURITY_GROUP }}
      PG_DATABASE: ${{ secrets.PG_DATABASE }}
      PG_HOST: ${{ secrets.PG_HOST }}
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
      PG_PORT: ${{ secrets.PG_PORT }}
      PG_USER: ${{ secrets.PG_USER }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker build . -t tailier/test:latest
          docker push tailier/test:latest

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: us-east-1
      - name: get runner ip address
        id: ip
        uses: haythem/public-ip@v1.2
      - name: whitelist runner ip address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker login
            echo "Pulling Docker image..."
            docker pull tailier/test:latest && echo "Docker image pulled successfully."
            echo "Stopping existing Docker container..."
            docker stop container-name && echo "Docker container stopped successfully." || echo "No running container to stop."
            echo "Removing existing Docker container..."
            docker rm container-name && echo "Docker container removed successfully." || echo "No container to remove."
            echo "Starting new Docker container..."
            docker run --name container-name -d -p 3001:3001 tailier/test:latest && echo "Docker container started successfully."
      - name: revoke runner ip address
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32